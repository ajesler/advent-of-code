class FancyKeyCoordinate < Struct.new(:x, :y)
#     1
#   2 3 4
# 5 6 7 8 9
#   A B C
#     D

  CODES = [
    [" ", " ", "D", " ", " "],
    [" ", "A", "B", "C", " "],
    ["5", "6", "7", "8", "9"],
    [" ", "2", "3", "4", " "],
    [" ", " ", "1", " ", " "],
  ]

  def u
    FancyKeyCoordinate.new(x, y+1).valid? || self
  end

  def d
    FancyKeyCoordinate.new(x, y-1).valid? || self
  end

  def l
    FancyKeyCoordinate.new(x-1, y).valid? || self
  end

  def r
    FancyKeyCoordinate.new(x+1, y).valid? || self
  end

  def key
    CODES[y+2][x+2]
  end

  def valid?
    x.abs <= 2 && y.abs <= 2 && key != " " ? self : nil
  end
end

class KeyCoordinate < Struct.new(:x, :y)
  MAPPING = {
    KeyCoordinate.new(-1, 1) => 1,
    KeyCoordinate.new(0, 1) => 2,
    KeyCoordinate.new(1, 1) => 3,
    KeyCoordinate.new(-1, 0) => 4,
    KeyCoordinate.new(0, 0) => 5,
    KeyCoordinate.new(1, 0) => 6,
    KeyCoordinate.new(-1, -1) => 7,
    KeyCoordinate.new(0, -1) => 8,
    KeyCoordinate.new(1, -1) => 9
  }

  def u
    KeyCoordinate.new(x, y+1).valid? || self
  end

  def d
    KeyCoordinate.new(x, y-1).valid? || self
  end

  def l
    KeyCoordinate.new(x-1, y).valid? || self
  end

  def r
    KeyCoordinate.new(x+1, y).valid? || self
  end

  def key
    KeyCoordinate::MAPPING[self]
  end

  def valid?
    x.abs <= 1 && y.abs <= 1 ? self : nil
  end
end

class KeypadSolver
  attr_reader :instructions, :start_coord, :verbose
  def initialize(instructions, start_coord: KeyCoordinate.new(0, 0), verbose: false)
    @instructions = instructions.split.map(&:downcase)
    @start_coord = start_coord
    @verbose = verbose
  end

  def solve
    start = start_coord
    key_coords = instructions.map do |instruction|
      puts "start: #{start.key}, instruction: #{instruction}" if verbose
      next_start = instruction.chars.inject(start) do |coord, char|
        new_coord = coord.send(char)
        puts "#{coord.key} + #{char} => #{new_coord.key}" if verbose
        new_coord
      end
      start = next_start
    end

    key_coords.map do |kc|
      kc.key
    end.map(&:to_s).join
  end
end

instructions1 = "ULL\nRRDDD\nLURDL\nUUUUD"
instructions2 = ["LLLUDRDLLULDUDLLRLUDURULDURRRRLLURLDLDDDULLDDUDLRDLRDUURRDUUDLLRUUDDLULURDLRDUUDUDRURULLLLDRULDDLRDDRDLRDDLURLDDUDLLUUDLRDDDDLULUUURRDLUUDDLULLURRRDULLUDUDRDRDDRLDLLRLRDDDRDLULLUULDLLLRRDDUURUURDLLDRRDDLRULDLLDRLLUDRRDLUUULDLURLLDDURRUULLLLLRLUDLDDLLLURRRDUDULRULULDDLLDLRDDDUULRLRDUURLURRUDDURRUUDUDLDDLDULDDDDDULRULRDLRLDLRDLDDLUDRDUUDLDUDUDLLLRLUUDRUDDDRDRURRLLLDLUULDUULRDLULLUURLDRRRLDRLUDRRURLDULULDRUDDULLLDRDLLULUDDDDRDRULDULRRRRDDRULDLRDU",
"DLDDRRDLLDUURRLULLLLRDRLUDURLDRRDURRRRUUDDUDRRDDDRRLDDLDDLURDLDRLUDULDUDUUDDDLLULRRLLUDULLLUULDDRDDUDUUDULURULULLDRLRUURDRDDLRRUDRUULLLLURRUDRDULDDRURRURLLLLLRLLLRLLUDUDLRDLULDUDLULLLUUDLLDDDUDUDLLRRDLRDLLLRRLRUDRDUDRURLUUURULLDDDDLLURDULURRLLLRLRRULLRRRLUUULLLLRLRDUURRDUURLLLDRDURRRULDDUDRRDLRLDLLRUDDLLUDRLLUUDRLLLLLLUDLURLLRUDRUUUULDLUDULLDDDDRLURUURDDDURRRLRLUDUUDURDDDDRRLRDLURDDLLULDRDDURLLURULUUUUURDUUULDRRLLURRRRRLDDUULLRULLDLDLDLRRRDRLDRUUD",
"RLDRRRURULDLUDLDUDLLDUUURRDUDDURULLRRDDULUUDRRRULRUURRRLUUULRDRUDRRLLRLURDLDRDRDLLUDRUULRUDRUDDRURLRLURRDDRRURUUDRRDDRURURUDUUUDUDRRLRDRUUURLLUUUDLRUUDDRDDDDLDRLRDUDDULDDLRLLRURLLURLDDLDLDDULLDDUUURDLRUDUUDLDURDDRUULDRDDRDDDUUUDRDRDDRRDRRDLRDRURDUDDLUUUDULLUULULULRDRUUDDURURDRRRRLUDLDUDURLDRURDLLUUUDLRRDRRURDDULULURLDUDDLUDLDDLLRLDULLULULURUURLDULUDLLUUDLDDULDRRDDUULLUDLDLLRDRDURDDURDDURLDDURUURLLRURURUDDURRDRLRLDDUUDUULRDLLURRRRULURULDUDUDDUDDRLLLDLURDUURUURLUULRRLDLULDDRLDDUURULURUDRD",
"URLDDRLLRRLDRLLRRURURURDDLRRRUUUURULRRUUDLUDRULLDLRUDDLULRUULDULURLLRLLUDDUDLURDRRRRLURULRURRURRULRRRULDLLDDLRLUDULUUUDDUDDRRDDDDUULRRLDRRULULRDUURRLDDRDULDURUDUDDLDLLURDDLDDRUDUUUDUUURDLDUDUUULLDLRDULRRRDLLURLDLLULRDDULULURLRLUULRLLLDDDUDLLDLURRRULRDUDDLULUDRUDDURULRLRUDDURLLURULLURDRULDUDLDULRRDLDURLUURRDDUDDUDRURUDDURRUUDURUULLLLDDRDDDDDULUUDDURRULLDRRLRRRRRDDRUUDDDURDRDRUDDUULDUDRRDRULUURLURLUDUDULDDRDULDLRUUDLLLRRLRDRDDUUULRDUDLUDLURRDUURDULDRLLDRDULDUDUULRLLDLRLDLUUDLRUULDUUULDLRLRLUULLLLRLRDUDRUUDURLDUDRRURLRUDRRLRDDLRDDLDDUDDDRLRLLRLUUURLURRRLULRLLDRLRDDRRDRL",
"DLLLLLLRLRDRUDLRLLRLDLRURRUURLDLDDDDDUDUULLLLRRLRRDUUDUDLULLRRDULUDLLULURLRULURUULRLURDUDLUDULULUUURLRUDULURULRURULURLRLDRRRRLUDLLDULLDDLLULUURRULRDURDUUDDDURRUDLLLLRLDLUDDULLDUDDURURURRRRULDULULUDDUUDRLRLLLDLLLUUUURUDUUDLDLLRLRDDUULLUURLDDLRRDRLULDLULRULDLDURLULUURRRUDLLRDLUDDULRULULUDDURDLUUURDUUURDUDURLUUDRLUDRULUDDRRDLUUDLLLRDDDDDDLDURDDLDRDLUUDRULLUDRDLDULLULDDRUUDRRLRURRUULLRLRDUUURRDRRDULDDULUUDDURLULRLRURLLRRR",
].join("\n")

solver1 = KeypadSolver.new(instructions1, start_coord: KeyCoordinate.new(0, 0), verbose: false)
puts solver1.solve

solver2 = KeypadSolver.new(instructions2, start_coord: FancyKeyCoordinate.new(-2, 0), verbose: false)
puts solver2.solve

